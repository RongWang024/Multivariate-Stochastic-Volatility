%% This code builds and estimate a Multivariate Stochastic Volatility Model

clear; close all; clc;
nloop = 21000;
burnin = 1000;

%% Load exchange rate data
% Unit: foreign currency to One U.S. Dollar, Not Seasonally Adjusted
data=dataset('File','EXR.csv','ReadVarNames',true,'ReadObsNames',false,'Delimiter',',');
% Convert exchange rates to returns
date = datenum(data.date(2:end)); % match the number of returns
exr = 100*price2ret(double(data(:, 2:end)));
csvwrite('exr_returns.csv', exr);
EXRret = ["EUR/USD" "JPY/USD" "CAD/USD" "GBP/USD" "MXN/USD" "INR/USD" "CHF/USD"...
    "THB/USD" "DKK/USD" "AUD/USD"];
[T, p] = size(exr);
T = length(exr);

%% Plot exchange rate returns
figure (1);
subplot(2,1,1)
plot(date, exr(:, 1), 'Linewidth', 0.2);
datetick('x');
title('EUR/USD Exchange Rate');
subplot(2,1,2)
plot(date, exr(:, 2), 'Linewidth', 0.2);
datetick('x');
title('JPY/USD Exchange Rate');

figure (2);
subplot(2,1,1)
plot(date, exr(:, 3), 'Linewidth', 0.2);
datetick('x');
title('CAD/USD Exchange Rate');
subplot(2,1,2)
plot(date, exr(:, 4), 'Linewidth', 0.2);
datetick('x');
title('GBP/USD Exchange Rate');

figure (3);
subplot(2,1,1)
plot(date, exr(:, 5), 'Linewidth', 0.2);
datetick('x');
title('MXN/USD Exchange Rate');
subplot(2,1,2)
plot(date, exr(:, 6), 'Linewidth', 0.2);
datetick('x');
title('INR/USD Exchange Rate');

figure (4);
subplot(2,1,1)
plot(date, exr(:, 7), 'Linewidth', 0.2);
datetick('x');
title('CHF/USD Exchange Rate');
subplot(2,1,2)
plot(date, exr(:, 8), 'Linewidth', 0.2);
datetick('x');
title('THB/USD Exchange Rate');

figure (5);
subplot(2,1,1)
plot(date, exr(:, 9), 'Linewidth', 0.2);
datetick('x');
title('DKK/USD Exchange Rate');
subplot(2,1,2)
plot(date, exr(:, 10), 'Linewidth', 0.2);
datetick('x');
title('AUD/USD Exchange Rate');

%% initialize for storage
store_theta = zeros(nloop - burnin,4,p); % [mu muh phih sigh2]
store_exph = zeros(nloop - burnin,T,p);  % store exp(h_t/2)
rand('state', sum(100*clock) ); randn('state', sum(200*clock) );

%% MSV
for i = 1 : p
    
    y = exr(:,i);  %%%%%%% i %%%%%%%
       
    %% Fit GMM to approximate the log-chi-square distribution
    % Transform the nonlinear SV problem to linear problem
    ystar = log(y.^2 + .0001);
    
    % Use EM algorithm
    
    % Use AIC
    AIC = zeros(1,7);
    GMModels = cell(1,7);
    options = statset('Display','final', 'MaxIter', 1000);
    for k = 1:7
        GMModels{k} = fitgmdist(ystar,k,'Options',options,'CovarianceType','diagonal','RegularizationValue',0.01);
        AIC(k)= GMModels{k}.AIC;
    end
    [minAIC,numComponents] = min(AIC);
    numComponents
    BestModel = GMModels{numComponents}
    pi = BestModel.ComponentProportion;
    mi = BestModel.mu' - 1.2704;
    sigi = zeros(1,numComponents);
    for j = 1 : numComponents
        sigi(j) = BestModel.Sigma(j);
    end
    sqrtsigi = sqrt(sigi);
    
    %% Set up the priors
    % Specify the priors as Chan and Hsiao (2014) did
    mu0 = 0; invVmu = 1/5;
    phih0 = .95; invVphih = 1;
    muh0 = 0; invVmuh = 1/5;
    nuh = 10; Sh = .02*(nuh-1);
    
    disp('Starting MCMC.... ');
    disp(' ' );
    % start_time = clock;
    
    %% initialize the Markov chain
    sigh2 = .05;
    phih = .95;
    muh = 1;
    mu = mean(y);
    h = log(var(y)*.8)*ones(T,1);
    
    %% MCMC
    for loop = 1:nloop
        %% sample mu
        invexph = exp(-h);
        Dmu = 1/(invVmu + sum(invexph));
        muhat = Dmu*sum(invexph.*y);
        mu = muhat + sqrt(Dmu)*randn;
        %% sample h, muh, phih, sigh2
        [h muh phih sigh2] = SVestimation(ystar,h,muh,phih,sigh2,pi,mi, ...
            sigi,sqrtsigi,numComponents,[muh0 invVmuh phih0 invVphih nuh Sh]);
        if ( mod( loop, 2000 ) ==0 )
            disp(  [ num2str( loop ) ' loops... ' ] )
        end
        if loop>burnin
            j = loop-burnin;
            store_exph(j,:,i) = exp(h/2)';
            store_theta(j,:,i) = [mu muh phih sigh2];
        end
    end
    
    thetahat = mean(store_theta(:,:,i))';
    exphhat = mean(store_exph(:,:,i))';
    exphlb = quantile(store_exph(:,:,i),.05)';
    exphub = quantile(store_exph(:,:,i),.95)';
    
    %figure
    figure (i+5); %%%%%%% i %%%%%%%
    %plot(tid, [exphhat exphlb exphub]);
    plot(date,[exphhat exphlb exphub], 'Linewidth', 0.2);
    datetick('x');
    title(EXRret(i)); %%%%%%% i %%%%%%%
    legend('Mean', 'CI Lower Bound', 'CI Upper Bound', 'Location', 'northeast');

end

save('Rong_MSV_estimation.mat')
save('Rong_store_exph.mat', 'store_exph', '-v7.3')

%% One-period-ahead forecasting
portfoliomean = zeros(p,1);
for j = 1 : p
    portfoliomean(j,1) = mean(store_theta(:,1,j));
end
vectorh = zeros(p,1);
for j = 1 : p
    vectorh(j,1) = portfoliomean(j,1) + mean(store_theta(:,3,j))*...
        (mean(store_exph(:,T,j)) - portfoliomean(j,1));
end
V = diag(vectorh);
condicorr = corr(exr);
portfoliovariance = V*condicorr*V;

save('means_and_VarianceMatrix.mat','portfoliomean','portfoliovariance');
csvwrite('variance_matrix.csv',portfoliovariance);
csvwrite('returns.csv',portfoliomean);


function [h mu phi sig2 S] = SVestimation(ystar,h,mu,phi,sig2,pi,mi,sigi,sqrtsigi,numComponents,prior)

mu0 = prior(1);  invVmu = prior(2);
phi0 = prior(3); invVphi = prior(4);
nu0 = prior(5);  S0 = prior(6);
T = length(h);

%% sample S from a "numComponents"-point distrete distribution
temprand = rand(T,1);
q = repmat(pi,T,1).*normpdf(repmat(ystar,1,numComponents),repmat(h,1,numComponents)+repmat(mi,T,1), repmat(sqrtsigi,T,1));
q = q./repmat(sum(q,2),1,numComponents);
S = numComponents - sum(repmat(temprand,1,numComponents)<cumsum(q,2),2)+1;
    
%% sample h using the precision-based algorithm
% y* = h + d + epsilon*, epsilon* ~ N(0,Sig_y*),
% Hphi h = alpha-tilde + zeta, zeta ~ N(0,Sig_h),
% where 
% d_t = E(epsilon*_t), Sig_y* = diag(var(epsilon*_1), ..., epsilon*_T),
% Sig_h = diag(sig2/(1-phi^2), sig2, ..., sig2)
Hphi = speye(T)-sparse(2:T,1:(T-1),phi*ones(1,T-1),T,T);
invSigh = sparse(1:T,1:T,[(1-phi^2)/sig2; 1/sig2*ones(T-1,1)]);
d = mi(S)'; invSigystar = spdiags(1./sigi(S)',0,T,T);
alpha = Hphi\[mu; ((1-phi)*mu)*ones(T-1,1)];
Kh = Hphi'*invSigh*Hphi + invSigystar;
Ch = chol(Kh,'lower');
hhat = Kh\(Hphi'*invSigh*Hphi*alpha + invSigystar*(ystar-d));
h = hhat + Ch'\randn(T,1);

%% sample sig2
newS = S0 + sum([(h(1)-mu)*sqrt(1-phi^2); h(2:end)-phi*h(1:end-1)-mu*(1-phi)].^2)/2;
sig2 = 1/gamrnd(nu0+T/2,1/newS);
     
%% sample phi
Xphi = h(1:end-1)-mu;
zphi = h(2:end) - mu;
Dphi = 1/(invVphi + Xphi'*Xphi/sig2);
phihat = Dphi*(invVphi*phi0 + Xphi'*zphi/sig2);
phic = phihat + sqrt(Dphi)*randn;
g = @(x) .5*log(1-x.^2)-.5*(1-x.^2)/sig2*(h(1)-mu)^2;
if abs(phic)<.9999
    alp = exp(g(phic)-g(phi));
    if alp>rand
        phi = phic;
    end
end 
    
%% sample mu    
Dmu = 1/(invVmu + ((T-1)*(1-phi)^2 + (1-phi^2))/sig2);
muhat = Dmu*(invVmu*mu0 + ...
    (1-phi^2)/sig2*h(1) + (1-phi)/sig2*sum(h(2:end)-phi*h(1:end-1)));
mu = muhat + sqrt(Dmu)*randn;

end


